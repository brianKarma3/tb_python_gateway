import paho.mqtt.client as mqtt
import json


class Habs:
    
    
    fanSpeedAtTemp = 35
    fanSpeedTempLow = 20 
    fanSpeedTempHigh = 70
    automode = 1 
    tempSetPoint = 27.5
    manualFanSpeed = 30 
    windyWallSpeed = 20

    
    def __init__(self, name):
        self.name = name 

    #Data carrys the information from the rpc call generated by the 

    def _upload_speed_at_temp(self, data, device):
        # data['method'] == "getFanSpeedAtTemp":
        
        reply_msg = {'device': device, 'id': data['id'], 'data':  float(self.fanSpeedAtTemp)}
        return json.dumps(reply_msg) 


    def _set_fan_speed_at_temp(self, data, device):
        # fanSpeedAtTemp = float(data['params'])
        topic_string = 'Habs/Hab2/ExtractionFan/FanSpeedAtTemperature'.split('/')
        topic_string[1] = device

        local_topic = '/'.join(topic_string)
        return local_topic

    def _upload_speed_low_temp(self, data, device):
        # data['method'] == "getFanSpeedAtTemp":
        
        reply_msg = {'device': device, 'id': data['id'], 'data':  float(self.fanSpeedTempLow)}
        return json.dumps(reply_msg) 
        
    def _set_fan_speed_low_temp(self, data, device):
        # fanSpeedAtTemp = float(data['params'])
        topic_string = 'Habs/Hab2/ExtractionFan/FanSpeedTemperatureLow'.split('/')
        topic_string[1] = device

        local_topic = '/'.join(topic_string)
        return local_topic


    def _upload_speed_high_temp(self, data, device):
        # data['method'] == "getFanSpeedAtTemp":
        
        reply_msg = {'device': device, 'id': data['id'], 'data':  float(self.fanSpeedTempHigh)}
        return json.dumps(reply_msg) 
        
    def _set_fan_speed_high_temp(self, data, device):
        # fanSpeedAtTemp = float(data['params'])
        topic_string = 'Habs/Hab2/ExtractionFan/FanSpeedTemperatureHigh'.split('/')
        topic_string[1] = device

        local_topic = '/'.join(topic_string)
        return local_topic


    def _upload_auto_mode(self, data, device):
        # data['method'] == "getFanSpeedAtTemp":
        mode = False 

        if self.automode == 1: mode = True


        reply_msg = {'device': device, 'id': data['id'], 'data':  mode}
        return json.dumps(reply_msg) 
        
    def _set_auto_mode(self, data, device):
        # fanSpeedAtTemp = float(data['params'])
        topic_string = 'Habs/Hab2/ExtractionFan/AutomaticMode'.split('/')
        topic_string[1] = device

        local_topic = '/'.join(topic_string)
        return local_topic

    def _upload_set_temp(self, data, device):
        # data['method'] == "getFanSpeedAtTemp":
        
        reply_msg = {'device': device, 'id': data['id'], 'data':  float(self.tempSetPoint)}
        return json.dumps(reply_msg) 
        
    def _set_set_temp(self, data, device):
        # fanSpeedAtTemp = float(data['params'])
        topic_string = 'Habs/Hab2/ExtractionFan/TemperatureSetPoint'.split('/')
        topic_string[1] = device

        local_topic = '/'.join(topic_string)
        topic_string[3] = 'FanTemperatureSetPoint'
        local_topic2 =  '/'.join(topic_string)
        return local_topic, local_topic2   

    def _upload_manual_fan_speed(self, data, device):
        # data['method'] == "getFanSpeedAtTemp":
        
        reply_msg = {'device': device, 'id': data['id'], 'data':  float(self.manualFanSpeed)}
        return json.dumps(reply_msg) 
        
    def _set_manual_fan_speed(self, data, device):
        # fanSpeedAtTemp = float(data['params'])
        topic_string = 'Habs/Hab2/ExtractionFan/Speed'.split('/')
        topic_string[1] = device

        local_topic = '/'.join(topic_string)
        return local_topic

    def _upload_windy_fan_speed(self, data, device):
        # data['method'] == "getFanSpeedAtTemp":
        
        reply_msg = {'device': device, 'id': data['id'], 'data':  float(self.windyWallSpeed)}
        return json.dumps(reply_msg) 
        
    def _set_manual_fan_speed(self, data, device):
        # fanSpeedAtTemp = float(data['params'])
        topic_string = 'Habs/Hab2/ExtractionFan/WindyWallSpeed'.split('/')
        topic_string[1] = device

        local_topic = '/'.join(topic_string)
        return local_topic


    

